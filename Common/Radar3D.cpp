/*
  ==============================================================================

  This is an automatically generated GUI class created by the Projucer!

  Be careful when adding custom code to these files, as only the code within
  the "//[xyz]" and "//[/xyz]" sections will be retained when the file is loaded
  and re-saved.

  Created with Projucer version: 5.4.5

  ------------------------------------------------------------------------------

  The Projucer is part of the JUCE library.
  Copyright (c) 2017 - ROLI Ltd.

  ==============================================================================
*/

//[Headers] You can add your own extra header files here...
//[/Headers]

#include "Radar3D.h"


//[MiscUserDefs] You can add your own user definitions and misc code here...
//[/MiscUserDefs]

//==============================================================================
Radar3D::Radar3D (AmbiDataSet* pEditablePoints, AmbiDataSet* pDisplayOnlyPoints, ZoomSettings* pZoomSettings, PointSelection* pPointSelection, RadarOptions* pRadarOptions)
{
    //[Constructor_pre] You can add your own custom stuff here..
	fullRadarFlag = false;
    //[/Constructor_pre]

    zyRadar.reset (new Radar2D (Radar2D::ZY_Half, pEditablePoints, pDisplayOnlyPoints, pZoomSettings, pPointSelection, pRadarOptions));
    addAndMakeVisible (zyRadar.get());
    zyRadar->setName ("zyRadar");

    xyRadar.reset (new Radar2D (Radar2D::XY, pEditablePoints, pDisplayOnlyPoints, pZoomSettings, pPointSelection, pRadarOptions));
    addAndMakeVisible (xyRadar.get());
    xyRadar->setName ("xyRadar");

    btnFull.reset (new ImageButton ("btnFull"));
    addAndMakeVisible (btnFull.get());
    btnFull->setButtonText (TRANS("new button"));
    btnFull->addListener (this);

    btnFull->setImages (false, true, false,
                        ImageCache::getFromMemory (flatArrowDown_png, flatArrowDown_pngSize), 1.000f, Colour (0x00000000),
                        Image(), 1.000f, Colour (0x00000000),
                        Image(), 1.000f, Colour (0x00000000));

    //[UserPreSize]
    //[/UserPreSize]

    setSize (600, 400);


    //[Constructor] You can add your own custom stuff here..
	btnFull->setClickingTogglesState(true);
    //[/Constructor]
}

Radar3D::~Radar3D()
{
    //[Destructor_pre]. You can add your own custom destruction code here..
    //[/Destructor_pre]

    zyRadar = nullptr;
    xyRadar = nullptr;
    btnFull = nullptr;


    //[Destructor]. You can add your own custom destruction code here..
    //[/Destructor]
}

//==============================================================================
void Radar3D::paint (Graphics& g)
{
    //[UserPrePaint] Add your own custom painting code here..
    //[/UserPrePaint]

    g.fillAll (Colour (0xff505050));

    //[UserPaint] Add your own custom painting code here..
    //[/UserPaint]
}

void Radar3D::resized()
{
    //[UserPreResize] Add your own custom resize code here..
	/* Workaround to comment out autogenerated resizing
    //[/UserPreResize]

    zyRadar->setBounds (0, 0 + proportionOfHeight (0.6594f), proportionOfWidth (1.0000f), roundToInt (proportionOfHeight (0.6594f) * 0.4976f));
    xyRadar->setBounds (0, 0, proportionOfWidth (1.0000f), proportionOfHeight (0.6594f));
    btnFull->setBounds (0, getHeight() - 6, proportionOfWidth (1.0000f), 6);
    //[UserResized] Add your own custom resize handling here..
	
	*/
	int secondRadarHeight = (getHeight() - 3) * (fullRadarFlag ? 0.5 : 0.3333f);
	int topRadarHeight = fullRadarFlag ? secondRadarHeight : secondRadarHeight * 2;
	xyRadar->setBounds(0, 0, getWidth(), topRadarHeight);
	zyRadar->setBounds(0, topRadarHeight, getWidth(), secondRadarHeight);
	btnFull->setBounds(0, topRadarHeight + secondRadarHeight, getWidth(), getHeight() - topRadarHeight - secondRadarHeight);
    //[/UserResized]
}

void Radar3D::buttonClicked (Button* buttonThatWasClicked)
{
    //[UserbuttonClicked_Pre]
    //[/UserbuttonClicked_Pre]

    if (buttonThatWasClicked == btnFull.get())
    {
        //[UserButtonCode_btnFull] -- add your button handler code here..
		setRadarMode(btnFull->getToggleState());
        //[/UserButtonCode_btnFull]
    }

    //[UserbuttonClicked_Post]
    //[/UserbuttonClicked_Post]
}



//[MiscUserCode] You can add your own definitions of your custom methods or any other code here...
void Radar3D::setRadarMode(bool fullRadar)
{
	zyRadar->setRadarMode(fullRadar ? Radar2D::ZY_Full : Radar2D::ZY_Half);
	fullRadarFlag = fullRadar;
	resized();
}
//[/MiscUserCode]


//==============================================================================
#if 0
/*  -- Projucer information section --

    This is where the Projucer stores the metadata that describe this GUI layout, so
    make changes in here at your peril!

BEGIN_JUCER_METADATA

<JUCER_COMPONENT documentType="Component" className="Radar3D" componentName=""
                 parentClasses="public Component" constructorParams="AmbiDataSet* pEditablePoints, AmbiDataSet* pDisplayOnlyPoints, ZoomSettings* pZoomSettings, PointSelection* pPointSelection, RadarOptions* pRadarOptions"
                 variableInitialisers="" snapPixels="8" snapActive="1" snapShown="1"
                 overlayOpacity="0.330" fixedSize="0" initialWidth="600" initialHeight="400">
  <BACKGROUND backgroundColour="ff505050"/>
  <GENERICCOMPONENT name="zyRadar" id="9b35aa2c2da622df" memberName="zyRadar" virtualName=""
                    explicitFocusOrder="0" pos="0 0R 100% 49.764%" posRelativeY="952154a5b6ffaa65"
                    posRelativeH="952154a5b6ffaa65" class="Radar2D" params="Radar2D::ZY_Half, pEditablePoints, pDisplayOnlyPoints, pZoomSettings, pPointSelection, pRadarOptions"/>
  <GENERICCOMPONENT name="xyRadar" id="952154a5b6ffaa65" memberName="xyRadar" virtualName=""
                    explicitFocusOrder="0" pos="0 0 100% 65.941%" class="Radar2D"
                    params="Radar2D::XY, pEditablePoints, pDisplayOnlyPoints, pZoomSettings, pPointSelection, pRadarOptions"/>
  <IMAGEBUTTON name="btnFull" id="7f9ff0bdbe393e2c" memberName="btnFull" virtualName=""
               explicitFocusOrder="0" pos="0 6R 100% 6" buttonText="new button"
               connectedEdges="0" needsCallback="1" radioGroupId="0" keepProportions="0"
               resourceNormal="flatArrowDown_png" opacityNormal="1.0" colourNormal="0"
               resourceOver="" opacityOver="1.0" colourOver="0" resourceDown=""
               opacityDown="1.0" colourDown="0"/>
</JUCER_COMPONENT>

END_JUCER_METADATA
*/
#endif

//==============================================================================
// Binary resources - be careful not to edit any of these sections!

// JUCER_RESOURCE: flatArrowDown_png, 196, "../Resources/FlatArrowDown.png"
static const unsigned char resource_Radar3D_flatArrowDown_png[] = { 137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,226,0,0,0,6,8,2,0,0,0,81,167,213,20,0,0,0,1,115,82,71,66,0,174,206,28,233,0,0,0,
4,103,65,77,65,0,0,177,143,11,252,97,5,0,0,0,9,112,72,89,115,0,0,14,195,0,0,14,195,1,199,111,168,100,0,0,0,89,73,68,65,84,88,71,237,210,177,13,192,32,16,4,193,163,75,119,243,148,67,153,78,8,8,94,32,236,
23,2,238,54,218,2,38,153,25,104,202,40,245,174,40,227,169,119,123,92,76,219,14,37,203,67,179,141,151,169,219,86,118,57,69,186,137,233,184,53,118,133,178,147,152,126,233,39,92,137,156,77,76,195,114,237,
74,100,64,192,11,234,158,20,245,183,74,135,132,0,0,0,0,73,69,78,68,174,66,96,130,0,0};

const char* Radar3D::flatArrowDown_png = (const char*) resource_Radar3D_flatArrowDown_png;
const int Radar3D::flatArrowDown_pngSize = 196;


//[EndFile] You can add extra defines here...
//[/EndFile]

